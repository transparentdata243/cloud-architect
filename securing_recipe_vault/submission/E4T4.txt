
# What additional architectural change can be made to reduce the internet facing attack surface of the web application instance.
So far we have done these:
-Machine level: disable ssh password login
-IAM level: changed the IAM policy of the instance to reduce its privilege. 
-Security Group: remove unnecessary open ports

We can further shrink the attack surface by:
-Security Group: only allow the load balancer to talk to the Web App EC2
-Response: We can also automatically block malicious IP addresses based on ssh brute force alerts based on the aws references below.
The high level steps:
  A GuardDuty finding is raised with suspected malicious activity.
  A CloudWatch Event is configured to filter for GuardDuty Finding type.
  A Lambda function is invoked by the CloudWatch Event and parses the GuardDuty finding.
  State data for blocked hosts is stored in Amazon DynamoDB table. The Lambda function checks the state table for existing host entry.
  The Lambda function creates a Rule inside AWS WAF and in a VPC NACL.
  A notification email is sent via Amazon Simple Notification Service (SNS).


# Assuming the IAM permissions for the S3 bucket are still insecure, would creating VPC private endpoints for S3 prevent the unauthorized access to the secrets bucket.
VPC endpoint can control access at the security group level and the IAM level. These are already achieved by our 
hardening done previously. If we want to create a deny IAM policy, we can do that in S3 directly. So it is an extra 
layer of unnecessary protection.

# Will applying default encryption setting to the s3 buckets encrypt the data that already exists?
No.

# The changes you made above were done through the console or CLI; describe the outcome if the original cloud formation templates are applied to this environment?
I used the console. If we apply the cloud formation template, it will erase our changes. 
So we should also update the cloud formation template and avoid manual changes in production.